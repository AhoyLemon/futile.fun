"use strict";

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var begin = {
  s: {
    bottom: 3,
    left: 5.7
  },
  r: {
    bottom: 8.5,
    left: 4,
    peak: 80
  }
};

var sDefaults = {
  bottom: begin.s.bottom,
  left: begin.s.left,
  width: 6,
  height: 9,
  retreating: false,
  pushForce: 1.6,
  retreatSpeed: 2.6
};

var rDefaults = {
  bottom: begin.r.bottom,
  left: begin.r.left,
  width: 17,
  height: 17,
  marginLeft: -3.6,
  peak: 74
};
function randomNumber(min, max) {
  return Math.floor(Math.random() * (max - min)) + min;
}

function workThisArray(myArray) {

  var r = Math.floor(Math.random() * myArray.length);
  var message = '';

  myArray[r].forEach(function (k) {
    //console.log(typeof k);
    if ((typeof k === "undefined" ? "undefined" : _typeof(k)) == "object") {
      //console.log(k)
      var z = Math.floor(Math.random() * k.length);

      if (_typeof(k[z]) == "object") {
        k[z].forEach(function (a) {
          if ((typeof a === "undefined" ? "undefined" : _typeof(a)) == "object") {
            message += a[Math.floor(Math.random() * a.length)];
          } else {
            message += a;
          }
        });
      } else {
        message += k[z];
      }
    } else {
      message += k;
    }
  });
  return message;
}

function stringInArray(s, a) {
  var n = a.indexOf(s);
  if (n > -1) {
    return true;
  } else {
    return false;
  }
}

function randomFrom(array) {
  return array[Math.floor(Math.random() * array.length)];
}

function shuffle(o) {
  for (var j, x, i = o.length; i; j = Math.floor(Math.random() * i), x = o[--i], o[i] = o[j], o[j] = x) {}
  return o;
}

function capitalize(string) {
  return string.charAt(0).toUpperCase() + string.slice(1);
}

function bold(string) {
  return '<strong>' + string + '</strong>';
}

function similarity(s1, s2) {
  var longer = s1;
  var shorter = s2;
  if (s1.length < s2.length) {
    longer = s2;
    shorter = s1;
  }
  var longerLength = longer.length;
  if (longerLength == 0) {
    return 1.0;
  }
  return (longerLength - editDistance(longer, shorter)) / parseFloat(longerLength);
}

function editDistance(s1, s2) {
  s1 = s1.toLowerCase();
  s2 = s2.toLowerCase();

  var costs = [];
  for (var i = 0; i <= s1.length; i++) {
    var lastValue = i;
    for (var j = 0; j <= s2.length; j++) {
      if (i == 0) costs[j] = j;else {
        if (j > 0) {
          var newValue = costs[j - 1];
          if (s1.charAt(i - 1) != s2.charAt(j - 1)) newValue = Math.min(Math.min(newValue, lastValue), costs[j]) + 1;
          costs[j - 1] = lastValue;
          lastValue = newValue;
        }
      }
    }
    if (i > 0) costs[s2.length] = lastValue;
  }
  return costs[s2.length];
}

function testChance(chance) {
  var r = Math.floor(Math.random() * 100) + 1;
  if (chance >= r) {
    return true;
  } else {
    return false;
  }
}

function sendEvent(c, a, l, v) {
  if (v) {
    ga('send', 'event', { eventCategory: c, eventAction: a, eventLabel: l, eventValue: v });
    console.log('CATEGORY: ' + c + ', ACTION:' + a + ', LABEL:' + l + ', VALUE:' + v);
  } else if (l) {
    ga('send', 'event', { eventCategory: c, eventAction: a, eventLabel: l });
    console.log('CATEGORY: ' + c + ', ACTION:' + a + ', LABEL:' + l);
  } else {
    ga('send', 'event', { eventCategory: c, eventAction: a });
    console.log('CATEGORY: ' + c + ', ACTION:' + a);
  }
}
var storeItems = [{
  id: 1, name: "fresh kicks", price: 85, scoreToReveal: 100,
  desc: "Better arch support means that you can move slightly faster",
  showDesc: false
}, {
  id: 2, name: "small pickaxe", price: 100, scoreToReveal: 130,
  desc: "It's not the sharpest, but it's enough to carve out a little bit of the rock to make it slightly smaller.",
  showDesc: false
}, {
  id: 3, name: "a whole bunch of gum", price: 50,
  desc: "Gum, and like, a considerable amount of it. Enough to stick to the boulder to make the boulder bigger and possibly stick to the hill.",
  showDesc: false
}, {
  id: 4, name: "analgesic heat rub", price: 70,
  desc: "Smells terrible! But should allow you to push to boulder a little bit faster.",
  showDesc: false
}, {
  id: 5, name: "Peach Tea", price: 160,
  desc: "a 20 ounce can of peach tea. Tastes pretty good. Probably won't help you with that rock pushing thing.",
  showDesc: false
}, {
  id: 6, name: "Heelies", price: 140,
  desc: "You know, those shoes with the wheels on them. Will make it easier to go downhill, and probably harder to go uphill."

  /*
  {
    id: 6, name: "turkey sandwich", price: 5,
    desc: "It makes you go super fast!!!! - Simone",
    showDesc: false
  },
  {
    id: 7, name: "ice cream sandwich", price: 20,
    desc: "It gives you so much energy that you can run up the whole hill (with the boulder). - Simone",
    showDesc: false
  },
  */

  /*
  {
    id: 8, name: "rancid tacos", price: 1,
    desc: "If you eat these tacos, you will accidentally keep pushing the rock backwards. -Simone",
    showDesc: false
  }
  */
}];
var keepPushingMessages = ["Keep going.", "Now keep pushing that rock.", "Okay, continue.", "This time should work."];

var rockFellMessages = ["Oops!", "Uh oh!", "Damn it!", "The rock fell.", "Oh no."];

var retreatMessages = ["Go back and get it!", "Guess you'll have to go back.", "Back down to the bottom.", "Maybe next time.", "No problem! Just go back."];
//@prepros-prepend partials/_variables.js
//@prepros-prepend partials/_functions.js
//@prepros-prepend partials/_store.js
//@prepros-prepend partials/_phrases.js

//@prepros-append partials/_vue.js
Vue.directive('focus', {
  // When the bound element is inserted into the DOM...
  inserted: function inserted(el) {
    // Focus the element
    el.focus();
  }
});

var app = new Vue({
  el: '#app',
  data: {
    phase: 'begin',
    message: 'Click Sisyphus to push the rock uphill.',
    score: 0,
    totalScore: 0,
    s: sDefaults,
    r: rDefaults,
    fg: {
      transform: 0
    },
    bg: {
      transform: 0
    },
    store: storeItems,
    inventory: []

  },

  methods: {
    sisyphusClick: function sisyphusClick() {
      var self = this;
      var f = self.s.pushForce;
      var r = self.s.retreatSpeed;
      var bT = void 0;

      if (self.s.retreating == false) {

        if (self.phase != 'begin' && self.phase != 'pushing') {
          self.switchMessage('pushing');
        }
        self.score++;
        self.totalScore++;
        self.s.bottom += f;
        self.s.left += f;

        self.r.bottom += f;
        self.r.left += f;

        //background transform
        bT = self.s.pushForce * 0.75;
        self.bg.transform -= bT;

        //alert(self.r.peak);
        if (self.r.left >= self.r.peak) {
          self.r.bottom = begin.r.bottom;
          self.r.left = begin.r.left;
          self.r.falling = true;
          self.s.retreating = true;
          self.switchMessage('falling');
        }
      } else if (self.s.retreating == true) {
        self.s.bottom -= r;
        self.s.left -= r;

        //forground transform
        bT = self.s.retreatSpeed * 0.75;
        self.bg.transform += bT;

        if (self.phase != 'retreat') {
          self.switchMessage('retreat');
          self.r.peak = randomNumber(55, 75);
        }
        if (self.s.bottom <= begin.s.bottom || self.s.left <= begin.s.left) {
          self.s.retreating = false;
          self.s.bottom = begin.s.bottom;
          self.s.left = begin.s.left;
          self.r.falling = false;
          self.fg.transform = 0;
          self.bg.transform = 0;
        }
      }
    },
    buyItem: function buyItem(i, item) {
      var self = this;

      if (self.score >= item.price) {
        self.score -= item.price;
        var n = self.store[i];
        n.showDesc = false;
        self.inventory.push(n);
        self.store.splice(i, 1);
        self.buyItemEffect(item.id);
      }
    },
    foo: function foo(item) {
      item.showDesc = !item.showDesc;
    },
    buyItemEffect: function buyItemEffect(id) {
      var self = this;
      if (id == 1) {
        // Fresh Kicks
        self.s.pushForce = self.s.pushForce * 1.01;
        self.s.retreatSpeed = self.s.retreatSpeed * 1.3;
      } else if (id == 2) {
        // small pickaxe
        self.r.height = self.r.height * 0.85;
        self.r.width = self.r.width * 0.85;
        self.s.pushForce = self.s.pushForce * 1.5;
      } else if (id == 3) {
        // gum
        self.r.height = self.r.height * 1.15;
        self.r.width = self.r.width * 1.15;
        self.s.pushForce = self.s.pushForce * 0.5;
      } else if (id == 4) {
        // analgesic
        self.s.pushForce = self.s.pushForce * 1.35;
      } else if (id == 5) {// peach tea
        // does nothing
      } else if (id == 6) {
        // heelies
        self.s.pushForce = self.s.pushForce * 0.85;
        self.s.retreatSpeed = self.s.retreatSpeed * 1.4;
      } else if (id == 7) {// turkey sandwich

      } else if (id == 8) {// rancid taco

      }
    },
    switchMessage: function switchMessage(m) {
      var self = this;
      self.phase = m;
      if (m == 'falling') {
        self.message = randomFrom(rockFellMessages);
      } else if (m == "retreat") {
        self.message = randomFrom(retreatMessages);
      } else if (m == "pushing") {
        self.message = randomFrom(keepPushingMessages);
      }
    }
  },

  computed: {
    rockLeft: function rockLeft() {
      return 'calc(' + this.s.width + '% + ' + this.r.left + '%)';
    },
    rockHeight: function rockHeight() {
      return this.r.height + '%';
    },
    rockWidth: function rockWidth() {
      return this.r.width + '%';
    },
    rockMarginLeft: function rockMarginLeft() {
      return this.r.marginLeft + '%';
    },
    foregroundTransform: function foregroundTransform() {
      return 'translateX(' + this.fg.transform + '%)';
    },
    backgroundTransform: function backgroundTransform() {
      return 'translateX(' + this.bg.transform + '%)';
    },
    availableUpgrades: function availableUpgrades() {
      var self = this;
      var a = [];
      self.store.forEach(function (item, i) {
        if (self.totalScore > item.price * 0.9) {
          a.push(item);
        }
      });
      return a;
    }
  },

  mounted: function mounted() {

    new PNotify({
      title: 'Achievement Unlocked!',
      text: "Maecenas ornare interdum eros, sit amet placerat orci auctor quis. Pellentesque iaculis diam dolor, vel porta nisi fermentum vitae. Phasellus iaculis dui arcu, in molestie mi porta sed."
    });
  }

});
//# sourceMappingURL=sisyphus.min.js.map